# -*- coding:utf-8 -*-"""Created at 3:21 PM 12/3/2019This is just to test with different parameters of SVM to fit with data,and plot with decision boundary with different class.One thing to notice is that for now, we could just fit the data withtwo dimension data with SVM, so that we could plot the data with 2D.@author: guangqiang.lu"""import numpy as npfrom sklearn.datasets import load_irisfrom sklearn.svm import SVCimport matplotlib.pyplot as pltx, y = load_iris(return_X_y=True)x = x[:, :2]def plot_graph(clf, ax):    # create a mesh to plot the figure    x_min, x_max = x[:, 0].min() - 1, x[:, 0].max() + 1    y_min, y_max = x[:, 1].min() - 1, x[:, 1].max() + 1    h = (x_max - x_min) / 100    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))    z = clf.predict(np.c_[xx.ravel(), yy.ravel()])    z = z.reshape(xx.shape)    # so that we could plot the figure, plot contour figure with plt.    ax.contourf(xx, yy, z, cmap=plt.cm.Paired, alpha=.8)    # scatter data point    ax.scatter(x[:, 0], x[:, 1], c=y, cmap=plt.cm.Paired)    ax.set_xlim(xx.min(), xx.max())def train_model(dict):    clf = SVC(gamma='auto')    if dict is not None:        for key, values in dict.items():            figure, ax = plt.subplots(1, len(values), figsize=(12, 10))            for i in range(len(values)):                setattr(clf, key, values[i])                clf.fit(x, y)                plot_graph(clf, ax[i])            plt.show()config = {"C": [.1, 10, 100]}train_model(config)from gensim.models import TfidfModel