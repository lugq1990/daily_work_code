# -*- coding:utf-8 -*-"""This is to use numpy to implement the SVD logic todecomposite a matrix and reconvert them into original matrix."""import numpy as npdata = np.array([[1, 0, 1, 0, 0],       [1, 1, 0, 0, 0],       [0, 1, 0, 0, 0],       [0, 1, 1, 0, 0],       [0, 0, 0, 1, 0],       [0, 0, 1, 1, 0],       [0, 0, 0, 1, 0],       [0, 0, 0, 1, 1]])# first decomposition the data to u, v, wu, v, w = np.linalg.svd(data)print('eigen values:', v)# reconvert them into original part.# we should first to make the eigen value into a diagonal matrix,# so that the v_new should be same with data.v_new = np.concatenate((np.diag(v), np.zeros((len(u) - len(v), len(v)))), axis=0)print("Are they close to each other: ", np.allclose(np.dot(np.dot(u, v_new), w), data))