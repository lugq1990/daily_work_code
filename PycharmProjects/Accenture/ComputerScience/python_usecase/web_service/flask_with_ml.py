# -*- coding:utf-8 -*-"""Created at 10:54 AM 12/24/2019This is to test with machine learning training, evaluation and prediction with flask restful API.@author: guangqiang.lu"""from sklearn.datasets import load_irisfrom sklearn.linear_model import LogisticRegressionfrom flask import abort, Flask, jsonify, make_response, requestfrom sklearn.externals import joblibimport osimport pandas as pdimport requestsimport numpy as npmodel_path = 'C:/Users/guangqiiang.lu/Documents/lugq/tensorflow_test'x, y = load_iris(return_X_y=True)app = Flask(__name__)@app.route("/training", methods=['GET'])def training():    lr = LogisticRegression()    lr.fit(x, y)    # save result to disk    joblib.dump(lr, os.path.join(model_path, 'lr.pkl'))    return make_response(jsonify({'training status': 'successful'}))@app.route('/evaluate', methods=['GET'])def evaluate():    model = joblib.load(os.path.join(model_path, 'lr.pkl'))    score = model.score(x, y)    return make_response(jsonify({"evluation score": str(score)}))@app.route('/predict', methods=['POST'])def predict():    try:        index = request.form.get("index")        # Here I just try to convert string with a list        if len(index) == 1:            data = x[int(index), :].reshape(1, -1)        else:            index = [int(m) for m in index.split(' ')]            data = x[index, :]        model = joblib.load(os.path.join(model_path, 'lr.pkl'))        prediction = model.predict(data)        prediction = prediction.tolist()        return make_response(jsonify({'predition': prediction}))    except ValueError:        raise RuntimeError("Features are not with satisfied type!")@app.route("/json_test", methods=["post"])def json_test():    req_data = request.get_json()    language = req_data['language']    framework = req_data['framework']    value_list = req_data['value_list']    return """        language is {}        framework is {}        value_list is {}    """.format(language, framework, value_list)if __name__ == '__main__':    app.run(host='0.0.0.0', port=5000, debug=True)